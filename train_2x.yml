
name: testing
model_type: default
scale: 2
use_amp: true
bfloat16: true
fast_matmul: true
compile: false
print_network: false
manual_seed: 314159

network_g:
  type: custom
  #type: span
  #type: realplksr

network_d:
  #type: custom
  #type: span
  type: patchgan
  #type: unet
  
path:
  pretrain_network_g: 'D:\saved_models\2x_custom128_g.pth'
  #pretrain_network_g: 'D:\saved_models\2x_realplksr_g.pth'
  #pretrain_network_g: 'D:\saved_models\2x_compact_g.pth'
  #pretrain_network_g: 'D:\saved_models\2x_span_g.pth'
  #pretrain_network_g: 'D:\neosr\experiments\custom\models\net_g_50000.pth'
  #pretrain_network_g: 'D:\saved_models\2x_custom_g.pth'
  #pretrain_network_g: 'D:\neosr\experiments\train_compact\models\net_g_12000.pth'
  #pretrain_network_g: 'D:\neosr\experiments\archtest_compact_small\models\net_g_latest.pth'
  
  #pretrain_network_d: 'D:\saved_models\2x_unet_d.pth'
  #pretrain_network_d: 'D:\neosr\experiments\custom\models\net_d_50000.pth'
  resume_state: ~
  #strict_load_g: false # do not uncomment, read docs

logger:
  use_tb_logger: true
  print_freq: 20
  save_checkpoint_freq: 1000
  
datasets:
  
  train:
    
    type: paired
    dataroot_lq: 'D:\DBZ\Align\Output\TRAIN_LR_2x_clust'
    dataroot_gt: 'D:\DBZ\Align\Output\TRAIN_HR_2x_clust'
    #dataroot_lq: 'E:\DBZ_PAIRS\temp_align\train_lr'
    #dataroot_gt: 'E:\DBZ_PAIRS\temp_align\train_hr'
    #dataroot_lq: 'E:\DBZ_PAIRS\temp_align\high_v_lr'
    #dataroot_gt: 'E:\DBZ_PAIRS\temp_align\high_v_hr'
    #meta_info: 'datasets/meta_info.txt'
    io_backend:
      type: disk

    gt_size: 720
    n_tiles: 10
    batch_size: 2
    accumulate: 10
    dataset_enlarge_ratio: 1
    use_hflip: false
    use_rot: false
    normalise_losses: false
    #augmentation: ['none', 'mixup', 'cutmix', 'resizemix'] #['cutblur']
    #aug_prob: [0.5, 0.1, 0.1, 0.1] #[0.7]

  val_1:
    name: val_for_outputs
    type: single
    save_img: true
    save_tb: true
    metrics: false
    dataroot_lq: 'D:\DBZ\Align\Output\VAL_LR\'
    #dataroot_gt: 'D:\DBZ\Align\Output\VAL_HR\'
    io_backend:
      type: disk
      
  val_2:
    name: val_for_scoring
    type: paired
    save_img: false
    save_tb: false
    metrics: false
    dataroot_lq: 'D:\DBZ\Align\Output\VAL_SCORING_LR_2x\'
    dataroot_gt: 'D:\DBZ\Align\Output\VAL_SCORING_HR_2x\'
    io_backend:
      type: disk
      
val:
  val_freq: 1000
  pbar: true
  #save_img: true
  tile: -1 # 200
  metrics:
    psnr:
      type: calculate_psnr
      better: higher
    ssim:
      type: calculate_ssim
      better: higher
    dists:
      type: calculate_dists
      better: lower

train:

  total_iter: 1000000
  warmup_iter: -1  # no warm up
  grad_clip: true
  
  optim_g:
    type: adamw
    lr: !!float 3e-5
    weight_decay: 0.0
    #betas: [0.9, 0.99]
    betas: [0.80, 0.99]
    
    #type: sgd
    #lr: !!float 1e-2
    
  optim_d:
    #type: nadam
    #type: adamw
    #lr: !!float 2e-4
    #betas: [0.98, 0.99]
    #betas: [0.80, 0.99]
    #weight_decay: 0.00
    #decoupled_weight_decay: true
    
    type: adamw
    lr: !!float 2e-4
    betas: [0.80, 0.99]
    weight_decay: 0.0001
    
    #type: sgd
    #lr: !!float 1e-2

  scheduler:
    #type: multisteplr
    #milestones: [200, 1000, 3000, 5000, 10000, 20000, 50000, 80000]
    #gamma: 0.999999
    type: ExponentialLR
    gamma: 0.99997

  # losses
  wavelet_guided: "off" # "disc", "on"
  pixel_opt:
    #type: HuberLoss
    type: L1Loss
    #type: MSELoss
    #loss_weight: 0.00
    loss_weight: 0.01
  mssim_opt:
    type: mssim
    loss_weight: 0.01
    #loss_weight: 0.10
  dists_opt:
    type: dists
    #loss_weight: 1.00
    #loss_weight: 1.00
    loss_weight: 1.0
  perceptual_opt:
    type: PerceptualLoss
    #'conv1_1', 'relu1_1', 'conv1_2', 'relu1_2', 'pool1', 'conv2_1', 'relu2_1', 'conv2_2', 'relu2_2', 'pool2',
    #'conv3_1', 'relu3_1', 'conv3_2', 'relu3_2', 'conv3_3', 'relu3_3', 'conv3_4', 'relu3_4', 'pool3', 'conv4_1',
    #'relu4_1', 'conv4_2', 'relu4_2', 'conv4_3', 'relu4_3', 'conv4_4', 'relu4_4', 'pool4', 'conv5_1', 'relu5_1',
    #'conv5_2', 'relu5_2', 'conv5_3', 'relu5_3', 'conv5_4', 'relu5_4', 'pool5'
    layer_weights:
      #'conv1_2': 0.00 bad
      #'relu1_2': 0.00 bad
      #'conv2_2': 0.00
      #'relu2_2': 1.00 bad
      #'pool2': 1.00
      'conv3_1': 1.00
      'conv3_2': 1.00
      'conv3_3': 1.00
      'conv3_4': 1.00
      'conv4_1': 0.25
      'conv4_2': 0.25
      'conv4_3': 0.25
      'conv4_4': 0.25
      #'relu4_4': 0.00
      #'conv5_3': 0.25
      #'relu5_3': 0.00
      #'conv5_4': 0.25
      #'relu5_4': 0.00 bad
      #'pool5': 0.00
      #'relu5_4': 1.00 bad
    perceptual_weight: 0.01
    #perceptual_weight: 0.30
    criterion: l1
    
  # vanilla, nsgan, bce, lsgan, huber, chc, wgan
  gan_opt:
    type: GANLoss
    gan_type: nsgan
    #loss_weight: 0.00
    loss_weight: 0.00
    
  #ldl_opt:
  #  type: HuberLoss
  #  loss_weight: 1.0
  ff_opt:
    type: focalfrequencyloss
    loss_weight: 0.01
  gw_opt:
    type: gw_loss
    loss_weight: 0.01
    criterion: l1

  #match_lq: false
  #color_opt:
  #  type: colorloss
  #  loss_weight: 0.0
  #  criterion: huber
  #luma_opt:
  #  type: lumaloss
  #  loss_weight: 0.00
  #  criterion: l2
